cmake_minimum_required(VERSION 3.10)

# Set the project name and language
project(grpc_helloworld C CXX)

set (Protobuf_PROTOC_EXECUTABLE /usr/local/bin/protoc)
set (GRCP_EXECUTABLE /usr/local/bin/grpc_cpp_plugin)
message(STATUS "Protobuf compiler: ${Protobuf_PROTOC_EXECUTABLE}")

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Define directories
set(PROTO_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protos)
set(CPP_OUTPUT_DIR ${PROTO_DIR}/cpp_generated)
set(GO_OUTPUT_DIR ${PROTO_DIR}/go_generated)
set(C_PLUS_SERVER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/grpc_cpp)

# Debug cmake with:
# message("Proto dir: ${PROTO_DIR}")

# Collect all c plus files in the server directory
file(GLOB C_PLUS_SERVER_SOURCE ${C_PLUS_SERVER_DIR}/*.cc)

# Collect all generated .cc files
file(GLOB cpp_grpc_srcs ${CPP_OUTPUT_DIR}/*.cc)

# Find required packages
find_package(Protobuf REQUIRED)
find_package(gRPC REQUIRED)
find_package(absl REQUIRED)




# # Collect all .proto files in the directory
# file(GLOB PROTO_FILES ${PROTO_DIR}/*.proto)

# # Create directories if they don't exist
# file(MAKE_DIRECTORY ${CPP_OUTPUT_DIR})
# file(MAKE_DIRECTORY ${GO_OUTPUT_DIR})

# # Setting vars for libraries found in grcp/example/cpp/cmake/common.cmake
# set(_GRPC_GRPCPP grpc++)
# set(_REFLECTION grpc++_reflection)
# set(_PROTOBUF_LIBPROTOBUF libprotobuf)

# find_program(_PROTOBUF_PROTOC protoc)
# find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)


# Function to generate C++ and Go files for a single .proto file
function(add_protobuf_generation proto_file)
    # Get the base filename without extension
    get_filename_component(base_name ${proto_file} NAME_WE)
    get_filename_component(proto_dir ${proto_file} DIRECTORY)
    get_filename_component(proto_file_name ${proto_file} NAME)

    set(cpp_out_files
        ${CPP_OUTPUT_DIR}/${base_name}.pb.cc 
        ${CPP_OUTPUT_DIR}/${base_name}.pb.h
        ${CPP_OUTPUT_DIR}/${base_name}.grpc.pb.h
        ${CPP_OUTPUT_DIR}/${base_name}.grpc.pb.cc)
    set(go_out_file ${GO_OUTPUT_DIR}/${base_name}.pb.go)


    # Add custom command for generating C++ files from .proto files
    add_custom_command(
        OUTPUT ${cpp_out_files}
        COMMAND ${Protobuf_PROTOC_EXECUTABLE}
        ARGS --cpp_out=${CPP_OUTPUT_DIR}
             --grpc_out=${CPP_OUTPUT_DIR}
             --plugin=protoc-gen-grpc=${GRCP_EXECUTABLE}
             --proto_path=${proto_dir}
             ${proto_file_name}
        DEPENDS ${PROTO_FILES}
        COMMENT "Generating C++ protobuf files for ${proto_file}"
        VERBATIM
    )

    # Add custom command for generating Go files from .proto files
    add_custom_command(
        OUTPUT ${go_out_file}
        COMMAND ${Protobuf_PROTOC_EXECUTABLE}
        ARGS --go_out=${proto_dir}
             --proto_path=${proto_dir}
             ${proto_file}
        DEPENDS ${proto_file}
        COMMENT "Generating Go protobuf files for ${proto_file}"
        VERBATIM
    )
    # Add custom targets for each file
    add_custom_target(
        generate_cpp_${base_name}
        ALL
        DEPENDS ${cpp_out_files}
    )

    # Add custom target for each file
    add_custom_target(
        generate_go_${base_name}
        ALL
        DEPENDS ${go_out_file}
    )
endfunction(add_protobuf_generation proto_file)

# message("Proto files: ${PROTO_FILES}")
# Apply the function to all .proto files
foreach(proto_file ${PROTO_FILES})
    message("Generating C++ protobuf files for ${proto_file}")
    add_protobuf_generation(${proto_file})
endforeach(proto_file ${PROTO_FILES})








# Create a library from the generated source files
add_library(hw_grpc_proto ${cpp_grpc_srcs})

# Include directories
target_include_directories(hw_grpc_proto PRIVATE
  ${Protobuf_INCLUDE_DIRS}
  ${gRPC_INCLUDE_DIRS}
  ${absl_INCLUDE_DIRS}
)


# Link libraries for the grpc_proto library
target_link_libraries(hw_grpc_proto
  ${gRPC_LIBRARIES}
  ${Protobuf_LIBRARIES}
  absl::check
  absl::flags
  absl::flags_parse
  absl::log
)


# Add an executable target with all source files
add_executable(my_executable ${C_PLUS_SERVER_SOURCE})

# Link necessary libraries to the executable
target_link_libraries(my_executable
  hw_grpc_proto
  ${gRPC_LIBRARIES}
  ${Protobuf_LIBRARIES}
  absl::check
  absl::flags
  absl::flags_parse
  absl::log
)
